syntax = "proto3";

package subscription.v1;

option go_package = "github.com/Dhoini/Payment-microservice/proto/subscription/v1;subscriptionpb";

import "google/protobuf/timestamp.proto";

// SubscriptionService предоставляет API для управления подписками
service SubscriptionService {
  // CreateSubscription создает новую подписку
  rpc CreateSubscription(CreateSubscriptionRequest) returns (SubscriptionResponse) {}

  // GetSubscription возвращает информацию о подписке по ID
  rpc GetSubscription(GetSubscriptionRequest) returns (SubscriptionResponse) {}

  // ListSubscriptions возвращает список подписок
  rpc ListSubscriptions(ListSubscriptionsRequest) returns (ListSubscriptionsResponse) {}

  // ListSubscriptionsByCustomer возвращает список подписок клиента
  rpc ListSubscriptionsByCustomer(ListSubscriptionsByCustomerRequest) returns (ListSubscriptionsResponse) {}

  // CancelSubscription отменяет подписку
  rpc CancelSubscription(CancelSubscriptionRequest) returns (SubscriptionResponse) {}

  // PauseSubscription приостанавливает подписку
  rpc PauseSubscription(PauseSubscriptionRequest) returns (SubscriptionResponse) {}

  // ResumeSubscription возобновляет подписку
  rpc ResumeSubscription(ResumeSubscriptionRequest) returns (SubscriptionResponse) {}

  // CreateSubscriptionPlan создает новый план подписки
  rpc CreateSubscriptionPlan(CreateSubscriptionPlanRequest) returns (SubscriptionPlanResponse) {}

  // GetSubscriptionPlan возвращает информацию о плане подписки
  rpc GetSubscriptionPlan(GetSubscriptionPlanRequest) returns (SubscriptionPlanResponse) {}

  // ListSubscriptionPlans возвращает список планов подписок
  rpc ListSubscriptionPlans(ListSubscriptionPlansRequest) returns (ListSubscriptionPlansResponse) {}

  // UpdateSubscriptionPlan обновляет план подписки
  rpc UpdateSubscriptionPlan(UpdateSubscriptionPlanRequest) returns (SubscriptionPlanResponse) {}

  // DeleteSubscriptionPlan удаляет план подписки
  rpc DeleteSubscriptionPlan(DeleteSubscriptionPlanRequest) returns (DeleteSubscriptionPlanResponse) {}
}

// CreateSubscriptionRequest запрос на создание подписки
message CreateSubscriptionRequest {
  string customer_id = 1;
  string plan_id = 2;
  int32 trial_period_days = 3;
  string default_payment_method_id = 4;
  map<string, string> metadata = 5;
}

// GetSubscriptionRequest запрос на получение подписки
message GetSubscriptionRequest {
  string id = 1;
}

// ListSubscriptionsRequest запрос на получение списка подписок
message ListSubscriptionsRequest {
  int32 limit = 1;
  int32 offset = 2;
  SubscriptionStatus status = 3;
}

// ListSubscriptionsByCustomerRequest запрос на получение списка подписок клиента
message ListSubscriptionsByCustomerRequest {
  string customer_id = 1;
  int32 limit = 2;
  int32 offset = 3;
  SubscriptionStatus status = 4;
}

// CancelSubscriptionRequest запрос на отмену подписки
message CancelSubscriptionRequest {
  string id = 1;
  bool cancel_at_period_end = 2;
}

// PauseSubscriptionRequest запрос на приостановку подписки
message PauseSubscriptionRequest {
  string id = 1;
}

// ResumeSubscriptionRequest запрос на возобновление подписки
message ResumeSubscriptionRequest {
  string id = 1;
}

// SubscriptionResponse ответ с информацией о подписке
message SubscriptionResponse {
  string id = 1;
  string customer_id = 2;
  string plan_id = 3;
  SubscriptionStatus status = 4;
  google.protobuf.Timestamp current_period_start = 5;
  google.protobuf.Timestamp current_period_end = 6;
  google.protobuf.Timestamp canceled_at = 7;
  bool cancel_at_period_end = 8;
  google.protobuf.Timestamp trial_start = 9;
  google.protobuf.Timestamp trial_end = 10;
  string default_payment_method_id = 11;
  map<string, string> metadata = 12;
  string external_id = 13;
  google.protobuf.Timestamp created_at = 14;
  google.protobuf.Timestamp updated_at = 15;
}

// ListSubscriptionsResponse ответ со списком подписок
message ListSubscriptionsResponse {
  repeated SubscriptionResponse subscriptions = 1;
  int32 total = 2;
}

// CreateSubscriptionPlanRequest запрос на создание плана подписки
message CreateSubscriptionPlanRequest {
  string name = 1;
  double amount = 2;
  string currency = 3;
  SubscriptionInterval interval = 4;
  int32 interval_count = 5;
  int32 trial_period_days = 6;
  map<string, string> metadata = 7;
}

// GetSubscriptionPlanRequest запрос на получение плана подписки
message GetSubscriptionPlanRequest {
  string id = 1;
}

// ListSubscriptionPlansRequest запрос на получение списка планов подписок
message ListSubscriptionPlansRequest {
  int32 limit = 1;
  int32 offset = 2;
  bool active_only = 3;
  string currency = 4;
}

// UpdateSubscriptionPlanRequest запрос на обновление плана подписки
message UpdateSubscriptionPlanRequest {
  string id = 1;
  string name = 2;
  bool active = 3;
  map<string, string> metadata = 4;
}

// DeleteSubscriptionPlanRequest запрос на удаление плана подписки
message DeleteSubscriptionPlanRequest {
  string id = 1;
}

// SubscriptionPlanResponse ответ с информацией о плане подписки
message SubscriptionPlanResponse {
  string id = 1;
  string name = 2;
  double amount = 3;
  string currency = 4;
  SubscriptionInterval interval = 5;
  int32 interval_count = 6;
  int32 trial_period_days = 7;
  bool active = 8;
  string external_id = 9;
  map<string, string> metadata = 10;
  google.protobuf.Timestamp created_at = 11;
  google.protobuf.Timestamp updated_at = 12;
}

// ListSubscriptionPlansResponse ответ со списком планов подписок
message ListSubscriptionPlansResponse {
  repeated SubscriptionPlanResponse plans = 1;
  int32 total = 2;
}

// DeleteSubscriptionPlanResponse ответ на удаление плана подписки
message DeleteSubscriptionPlanResponse {
  bool success = 1;
}

// SubscriptionStatus статус подписки
enum SubscriptionStatus {
  SUBSCRIPTION_STATUS_UNSPECIFIED = 0;
  SUBSCRIPTION_STATUS_ACTIVE = 1;
  SUBSCRIPTION_STATUS_TRIALING = 2;
  SUBSCRIPTION_STATUS_CANCELED = 3;
  SUBSCRIPTION_STATUS_PAUSED = 4;
}

// SubscriptionInterval период подписки
enum SubscriptionInterval {
  SUBSCRIPTION_INTERVAL_UNSPECIFIED = 0;
  SUBSCRIPTION_INTERVAL_DAY = 1;
  SUBSCRIPTION_INTERVAL_WEEK = 2;
  SUBSCRIPTION_INTERVAL_MONTH = 3;
  SUBSCRIPTION_INTERVAL_YEAR = 4;
}