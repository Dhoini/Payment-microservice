// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/subscription/v1/subscription.proto

package subscriptionpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SubscriptionService_CreateSubscription_FullMethodName          = "/subscription.v1.SubscriptionService/CreateSubscription"
	SubscriptionService_GetSubscription_FullMethodName             = "/subscription.v1.SubscriptionService/GetSubscription"
	SubscriptionService_ListSubscriptions_FullMethodName           = "/subscription.v1.SubscriptionService/ListSubscriptions"
	SubscriptionService_ListSubscriptionsByCustomer_FullMethodName = "/subscription.v1.SubscriptionService/ListSubscriptionsByCustomer"
	SubscriptionService_CancelSubscription_FullMethodName          = "/subscription.v1.SubscriptionService/CancelSubscription"
	SubscriptionService_PauseSubscription_FullMethodName           = "/subscription.v1.SubscriptionService/PauseSubscription"
	SubscriptionService_ResumeSubscription_FullMethodName          = "/subscription.v1.SubscriptionService/ResumeSubscription"
	SubscriptionService_CreateSubscriptionPlan_FullMethodName      = "/subscription.v1.SubscriptionService/CreateSubscriptionPlan"
	SubscriptionService_GetSubscriptionPlan_FullMethodName         = "/subscription.v1.SubscriptionService/GetSubscriptionPlan"
	SubscriptionService_ListSubscriptionPlans_FullMethodName       = "/subscription.v1.SubscriptionService/ListSubscriptionPlans"
	SubscriptionService_UpdateSubscriptionPlan_FullMethodName      = "/subscription.v1.SubscriptionService/UpdateSubscriptionPlan"
	SubscriptionService_DeleteSubscriptionPlan_FullMethodName      = "/subscription.v1.SubscriptionService/DeleteSubscriptionPlan"
)

// SubscriptionServiceClient is the client API for SubscriptionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SubscriptionService предоставляет API для управления подписками
type SubscriptionServiceClient interface {
	// CreateSubscription создает новую подписку
	CreateSubscription(ctx context.Context, in *CreateSubscriptionRequest, opts ...grpc.CallOption) (*SubscriptionResponse, error)
	// GetSubscription возвращает информацию о подписке по ID
	GetSubscription(ctx context.Context, in *GetSubscriptionRequest, opts ...grpc.CallOption) (*SubscriptionResponse, error)
	// ListSubscriptions возвращает список подписок
	ListSubscriptions(ctx context.Context, in *ListSubscriptionsRequest, opts ...grpc.CallOption) (*ListSubscriptionsResponse, error)
	// ListSubscriptionsByCustomer возвращает список подписок клиента
	ListSubscriptionsByCustomer(ctx context.Context, in *ListSubscriptionsByCustomerRequest, opts ...grpc.CallOption) (*ListSubscriptionsResponse, error)
	// CancelSubscription отменяет подписку
	CancelSubscription(ctx context.Context, in *CancelSubscriptionRequest, opts ...grpc.CallOption) (*SubscriptionResponse, error)
	// PauseSubscription приостанавливает подписку
	PauseSubscription(ctx context.Context, in *PauseSubscriptionRequest, opts ...grpc.CallOption) (*SubscriptionResponse, error)
	// ResumeSubscription возобновляет подписку
	ResumeSubscription(ctx context.Context, in *ResumeSubscriptionRequest, opts ...grpc.CallOption) (*SubscriptionResponse, error)
	// CreateSubscriptionPlan создает новый план подписки
	CreateSubscriptionPlan(ctx context.Context, in *CreateSubscriptionPlanRequest, opts ...grpc.CallOption) (*SubscriptionPlanResponse, error)
	// GetSubscriptionPlan возвращает информацию о плане подписки
	GetSubscriptionPlan(ctx context.Context, in *GetSubscriptionPlanRequest, opts ...grpc.CallOption) (*SubscriptionPlanResponse, error)
	// ListSubscriptionPlans возвращает список планов подписок
	ListSubscriptionPlans(ctx context.Context, in *ListSubscriptionPlansRequest, opts ...grpc.CallOption) (*ListSubscriptionPlansResponse, error)
	// UpdateSubscriptionPlan обновляет план подписки
	UpdateSubscriptionPlan(ctx context.Context, in *UpdateSubscriptionPlanRequest, opts ...grpc.CallOption) (*SubscriptionPlanResponse, error)
	// DeleteSubscriptionPlan удаляет план подписки
	DeleteSubscriptionPlan(ctx context.Context, in *DeleteSubscriptionPlanRequest, opts ...grpc.CallOption) (*DeleteSubscriptionPlanResponse, error)
}

type subscriptionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscriptionServiceClient(cc grpc.ClientConnInterface) SubscriptionServiceClient {
	return &subscriptionServiceClient{cc}
}

func (c *subscriptionServiceClient) CreateSubscription(ctx context.Context, in *CreateSubscriptionRequest, opts ...grpc.CallOption) (*SubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubscriptionResponse)
	err := c.cc.Invoke(ctx, SubscriptionService_CreateSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) GetSubscription(ctx context.Context, in *GetSubscriptionRequest, opts ...grpc.CallOption) (*SubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubscriptionResponse)
	err := c.cc.Invoke(ctx, SubscriptionService_GetSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) ListSubscriptions(ctx context.Context, in *ListSubscriptionsRequest, opts ...grpc.CallOption) (*ListSubscriptionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSubscriptionsResponse)
	err := c.cc.Invoke(ctx, SubscriptionService_ListSubscriptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) ListSubscriptionsByCustomer(ctx context.Context, in *ListSubscriptionsByCustomerRequest, opts ...grpc.CallOption) (*ListSubscriptionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSubscriptionsResponse)
	err := c.cc.Invoke(ctx, SubscriptionService_ListSubscriptionsByCustomer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) CancelSubscription(ctx context.Context, in *CancelSubscriptionRequest, opts ...grpc.CallOption) (*SubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubscriptionResponse)
	err := c.cc.Invoke(ctx, SubscriptionService_CancelSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) PauseSubscription(ctx context.Context, in *PauseSubscriptionRequest, opts ...grpc.CallOption) (*SubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubscriptionResponse)
	err := c.cc.Invoke(ctx, SubscriptionService_PauseSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) ResumeSubscription(ctx context.Context, in *ResumeSubscriptionRequest, opts ...grpc.CallOption) (*SubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubscriptionResponse)
	err := c.cc.Invoke(ctx, SubscriptionService_ResumeSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) CreateSubscriptionPlan(ctx context.Context, in *CreateSubscriptionPlanRequest, opts ...grpc.CallOption) (*SubscriptionPlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubscriptionPlanResponse)
	err := c.cc.Invoke(ctx, SubscriptionService_CreateSubscriptionPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) GetSubscriptionPlan(ctx context.Context, in *GetSubscriptionPlanRequest, opts ...grpc.CallOption) (*SubscriptionPlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubscriptionPlanResponse)
	err := c.cc.Invoke(ctx, SubscriptionService_GetSubscriptionPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) ListSubscriptionPlans(ctx context.Context, in *ListSubscriptionPlansRequest, opts ...grpc.CallOption) (*ListSubscriptionPlansResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSubscriptionPlansResponse)
	err := c.cc.Invoke(ctx, SubscriptionService_ListSubscriptionPlans_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) UpdateSubscriptionPlan(ctx context.Context, in *UpdateSubscriptionPlanRequest, opts ...grpc.CallOption) (*SubscriptionPlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubscriptionPlanResponse)
	err := c.cc.Invoke(ctx, SubscriptionService_UpdateSubscriptionPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) DeleteSubscriptionPlan(ctx context.Context, in *DeleteSubscriptionPlanRequest, opts ...grpc.CallOption) (*DeleteSubscriptionPlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSubscriptionPlanResponse)
	err := c.cc.Invoke(ctx, SubscriptionService_DeleteSubscriptionPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscriptionServiceServer is the server API for SubscriptionService service.
// All implementations must embed UnimplementedSubscriptionServiceServer
// for forward compatibility.
//
// SubscriptionService предоставляет API для управления подписками
type SubscriptionServiceServer interface {
	// CreateSubscription создает новую подписку
	CreateSubscription(context.Context, *CreateSubscriptionRequest) (*SubscriptionResponse, error)
	// GetSubscription возвращает информацию о подписке по ID
	GetSubscription(context.Context, *GetSubscriptionRequest) (*SubscriptionResponse, error)
	// ListSubscriptions возвращает список подписок
	ListSubscriptions(context.Context, *ListSubscriptionsRequest) (*ListSubscriptionsResponse, error)
	// ListSubscriptionsByCustomer возвращает список подписок клиента
	ListSubscriptionsByCustomer(context.Context, *ListSubscriptionsByCustomerRequest) (*ListSubscriptionsResponse, error)
	// CancelSubscription отменяет подписку
	CancelSubscription(context.Context, *CancelSubscriptionRequest) (*SubscriptionResponse, error)
	// PauseSubscription приостанавливает подписку
	PauseSubscription(context.Context, *PauseSubscriptionRequest) (*SubscriptionResponse, error)
	// ResumeSubscription возобновляет подписку
	ResumeSubscription(context.Context, *ResumeSubscriptionRequest) (*SubscriptionResponse, error)
	// CreateSubscriptionPlan создает новый план подписки
	CreateSubscriptionPlan(context.Context, *CreateSubscriptionPlanRequest) (*SubscriptionPlanResponse, error)
	// GetSubscriptionPlan возвращает информацию о плане подписки
	GetSubscriptionPlan(context.Context, *GetSubscriptionPlanRequest) (*SubscriptionPlanResponse, error)
	// ListSubscriptionPlans возвращает список планов подписок
	ListSubscriptionPlans(context.Context, *ListSubscriptionPlansRequest) (*ListSubscriptionPlansResponse, error)
	// UpdateSubscriptionPlan обновляет план подписки
	UpdateSubscriptionPlan(context.Context, *UpdateSubscriptionPlanRequest) (*SubscriptionPlanResponse, error)
	// DeleteSubscriptionPlan удаляет план подписки
	DeleteSubscriptionPlan(context.Context, *DeleteSubscriptionPlanRequest) (*DeleteSubscriptionPlanResponse, error)
	mustEmbedUnimplementedSubscriptionServiceServer()
}

// UnimplementedSubscriptionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSubscriptionServiceServer struct{}

func (UnimplementedSubscriptionServiceServer) CreateSubscription(context.Context, *CreateSubscriptionRequest) (*SubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubscription not implemented")
}
func (UnimplementedSubscriptionServiceServer) GetSubscription(context.Context, *GetSubscriptionRequest) (*SubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscription not implemented")
}
func (UnimplementedSubscriptionServiceServer) ListSubscriptions(context.Context, *ListSubscriptionsRequest) (*ListSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubscriptions not implemented")
}
func (UnimplementedSubscriptionServiceServer) ListSubscriptionsByCustomer(context.Context, *ListSubscriptionsByCustomerRequest) (*ListSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubscriptionsByCustomer not implemented")
}
func (UnimplementedSubscriptionServiceServer) CancelSubscription(context.Context, *CancelSubscriptionRequest) (*SubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelSubscription not implemented")
}
func (UnimplementedSubscriptionServiceServer) PauseSubscription(context.Context, *PauseSubscriptionRequest) (*SubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseSubscription not implemented")
}
func (UnimplementedSubscriptionServiceServer) ResumeSubscription(context.Context, *ResumeSubscriptionRequest) (*SubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeSubscription not implemented")
}
func (UnimplementedSubscriptionServiceServer) CreateSubscriptionPlan(context.Context, *CreateSubscriptionPlanRequest) (*SubscriptionPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubscriptionPlan not implemented")
}
func (UnimplementedSubscriptionServiceServer) GetSubscriptionPlan(context.Context, *GetSubscriptionPlanRequest) (*SubscriptionPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriptionPlan not implemented")
}
func (UnimplementedSubscriptionServiceServer) ListSubscriptionPlans(context.Context, *ListSubscriptionPlansRequest) (*ListSubscriptionPlansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubscriptionPlans not implemented")
}
func (UnimplementedSubscriptionServiceServer) UpdateSubscriptionPlan(context.Context, *UpdateSubscriptionPlanRequest) (*SubscriptionPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubscriptionPlan not implemented")
}
func (UnimplementedSubscriptionServiceServer) DeleteSubscriptionPlan(context.Context, *DeleteSubscriptionPlanRequest) (*DeleteSubscriptionPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubscriptionPlan not implemented")
}
func (UnimplementedSubscriptionServiceServer) mustEmbedUnimplementedSubscriptionServiceServer() {}
func (UnimplementedSubscriptionServiceServer) testEmbeddedByValue()                             {}

// UnsafeSubscriptionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubscriptionServiceServer will
// result in compilation errors.
type UnsafeSubscriptionServiceServer interface {
	mustEmbedUnimplementedSubscriptionServiceServer()
}

func RegisterSubscriptionServiceServer(s grpc.ServiceRegistrar, srv SubscriptionServiceServer) {
	// If the following call pancis, it indicates UnimplementedSubscriptionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SubscriptionService_ServiceDesc, srv)
}

func _SubscriptionService_CreateSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).CreateSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionService_CreateSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).CreateSubscription(ctx, req.(*CreateSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_GetSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).GetSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionService_GetSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).GetSubscription(ctx, req.(*GetSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_ListSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).ListSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionService_ListSubscriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).ListSubscriptions(ctx, req.(*ListSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_ListSubscriptionsByCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubscriptionsByCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).ListSubscriptionsByCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionService_ListSubscriptionsByCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).ListSubscriptionsByCustomer(ctx, req.(*ListSubscriptionsByCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_CancelSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).CancelSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionService_CancelSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).CancelSubscription(ctx, req.(*CancelSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_PauseSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).PauseSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionService_PauseSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).PauseSubscription(ctx, req.(*PauseSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_ResumeSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).ResumeSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionService_ResumeSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).ResumeSubscription(ctx, req.(*ResumeSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_CreateSubscriptionPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubscriptionPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).CreateSubscriptionPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionService_CreateSubscriptionPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).CreateSubscriptionPlan(ctx, req.(*CreateSubscriptionPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_GetSubscriptionPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscriptionPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).GetSubscriptionPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionService_GetSubscriptionPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).GetSubscriptionPlan(ctx, req.(*GetSubscriptionPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_ListSubscriptionPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubscriptionPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).ListSubscriptionPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionService_ListSubscriptionPlans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).ListSubscriptionPlans(ctx, req.(*ListSubscriptionPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_UpdateSubscriptionPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubscriptionPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).UpdateSubscriptionPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionService_UpdateSubscriptionPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).UpdateSubscriptionPlan(ctx, req.(*UpdateSubscriptionPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_DeleteSubscriptionPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubscriptionPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).DeleteSubscriptionPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionService_DeleteSubscriptionPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).DeleteSubscriptionPlan(ctx, req.(*DeleteSubscriptionPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SubscriptionService_ServiceDesc is the grpc.ServiceDesc for SubscriptionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubscriptionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "subscription.v1.SubscriptionService",
	HandlerType: (*SubscriptionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSubscription",
			Handler:    _SubscriptionService_CreateSubscription_Handler,
		},
		{
			MethodName: "GetSubscription",
			Handler:    _SubscriptionService_GetSubscription_Handler,
		},
		{
			MethodName: "ListSubscriptions",
			Handler:    _SubscriptionService_ListSubscriptions_Handler,
		},
		{
			MethodName: "ListSubscriptionsByCustomer",
			Handler:    _SubscriptionService_ListSubscriptionsByCustomer_Handler,
		},
		{
			MethodName: "CancelSubscription",
			Handler:    _SubscriptionService_CancelSubscription_Handler,
		},
		{
			MethodName: "PauseSubscription",
			Handler:    _SubscriptionService_PauseSubscription_Handler,
		},
		{
			MethodName: "ResumeSubscription",
			Handler:    _SubscriptionService_ResumeSubscription_Handler,
		},
		{
			MethodName: "CreateSubscriptionPlan",
			Handler:    _SubscriptionService_CreateSubscriptionPlan_Handler,
		},
		{
			MethodName: "GetSubscriptionPlan",
			Handler:    _SubscriptionService_GetSubscriptionPlan_Handler,
		},
		{
			MethodName: "ListSubscriptionPlans",
			Handler:    _SubscriptionService_ListSubscriptionPlans_Handler,
		},
		{
			MethodName: "UpdateSubscriptionPlan",
			Handler:    _SubscriptionService_UpdateSubscriptionPlan_Handler,
		},
		{
			MethodName: "DeleteSubscriptionPlan",
			Handler:    _SubscriptionService_DeleteSubscriptionPlan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/subscription/v1/subscription.proto",
}
