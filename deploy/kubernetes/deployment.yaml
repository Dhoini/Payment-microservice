apiVersion: apps/v1
kind: Deployment
metadata:
  name: payment-service
  namespace: payments
  labels:
    app: payment-service
    component: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: payment-service
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: payment-service
        component: backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      containers:
        - name: payment-service
          image: ${DOCKER_REGISTRY}/payment-service:${IMAGE_TAG}
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8080
          env:
            - name: GIN_MODE
              valueFrom:
                configMapKeyRef:
                  name: payment-service-config
                  key: GIN_MODE
            - name: PORT
              valueFrom:
                configMapKeyRef:
                  name: payment-service-config
                  key: PORT
            - name: DEBUG
              valueFrom:
                configMapKeyRef:
                  name: payment-service-config
                  key: DEBUG
            - name: SERVER_READ_TIMEOUT
              valueFrom:
                configMapKeyRef:
                  name: payment-service-config
                  key: SERVER_READ_TIMEOUT
            - name: SERVER_WRITE_TIMEOUT
              valueFrom:
                configMapKeyRef:
                  name: payment-service-config
                  key: SERVER_WRITE_TIMEOUT
            - name: SERVER_SHUTDOWN_TIMEOUT
              valueFrom:
                configMapKeyRef:
                  name: payment-service-config
                  key: SERVER_SHUTDOWN_TIMEOUT
            - name: DB_HOST
              valueFrom:
                configMapKeyRef:
                  name: payment-service-config
                  key: DB_HOST
            - name: DB_PORT
              valueFrom:
                configMapKeyRef:
                  name: payment-service-config
                  key: DB_PORT
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: payment-service-secret
                  key: DB_USER
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: payment-service-secret
                  key: DB_PASSWORD
            - name: DB_NAME
              valueFrom:
                configMapKeyRef:
                  name: payment-service-config
                  key: DB_NAME
            - name: DB_SSLMODE
              valueFrom:
                configMapKeyRef:
                  name: payment-service-config
                  key: DB_SSLMODE
            - name: LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  name: payment-service-config
                  key: LOG_LEVEL
            - name: STRIPE_API_KEY
              valueFrom:
                secretKeyRef:
                  name: payment-service-secret
                  key: STRIPE_API_KEY
            - name: STRIPE_WEBHOOK_SECRET
              valueFrom:
                secretKeyRef:
                  name: payment-service-secret
                  key: STRIPE_WEBHOOK_SECRET
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "500m"
              memory: "512Mi"
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 2
          startupProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 30
          volumeMounts:
            - name: config
              mountPath: /app/config
            - name: logs
              mountPath: /app/logs
      volumes:
        - name: config
          configMap:
            name: payment-service-config
        - name: logs
          emptyDir: {}
      terminationGracePeriodSeconds: 60
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - payment-service
                topologyKey: "kubernetes.io/hostname"