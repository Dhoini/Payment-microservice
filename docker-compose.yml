services:
  payment-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: payment-service
    ports:
      - "8080:8080"  # HTTP API
      - "50051:50051"  # gRPC
    environment:
      - APP_ENV=development
      - LOG_LEVEL=debug
    depends_on:
      postgres: # Указываем зависимость от сервиса postgres
        condition: service_healthy # Ждем, пока healthcheck не станет успешным
      kafka:
        condition: service_started # Для Kafka/Zookeeper обычно достаточно service_started
      zookeeper:
        condition: service_started
    volumes:
      - ./config.yml:/app/config.yml
    restart: unless-stopped
    networks:
      - payment-network

  postgres:
    image: postgres:16-alpine
    container_name: payment-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=secretPass
      - POSTGRES_DB=payment
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d  # Раскомментируйте для инициализации БД при старте
    networks:
      - payment-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d payment"] # Проверяем готовность для юзера 'admin' и базы 'payment'
      interval: 10s
      timeout: 5s
      retries: 5


  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: payment-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - payment-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: payment-kafka
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    command: "bash -c ' \
            kafka-topics.sh --create --topic subscription_created --partitions 3 --replication-factor 1 --if-not-exists --bootstrap-server kafka:29092; \
            kafka-topics.sh --create --topic payment_events --partitions 1 --replication-factor 1 --if-not-exists --bootstrap-server kafka:29092; \
            kafka-topics.sh --create --topic subscription_canceled -- partitions 2 --replication-factor 1 --if-not-exists --bootstrap-server kafka:29092; \
           /etc/confluent/docker/run \
            '"
    networks:
      - payment-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: payment-kafka-ui
    ports:
      - "8081:8080"
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - payment-network

  redis:
    image: redis:7-alpine
    container_name: payment-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - payment-network

volumes:
  postgres-data:
  redis-data:

networks:
  payment-network:
    driver: bridge